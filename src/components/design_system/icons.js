import React from 'react';

import {getColor} from './colors';

export const CartIcon = (props) => (
    <svg width="24" height="28" viewBox="0 0 24 28" fill="none" xmlns="http://www.w3.org/2000/svg" {...props}>
        <g clipPath="url(#clip0_155_2)">
            <path d="M7.08509 26.3192C7.51987 26.3192 7.87233 25.9668 7.87233 25.532C7.87233 25.0972 7.51987 24.7448 7.08509 24.7448C6.65031 24.7448 6.29785 25.0972 6.29785 25.532C6.29785 25.9668 6.65031 26.3192 7.08509 26.3192Z" stroke={props.color ? getColor(props.color) : getColor('black')} strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
            <path d="M15.7448 26.3192C16.1795 26.3192 16.532 25.9668 16.532 25.532C16.532 25.0972 16.1795 24.7448 15.7448 24.7448C15.31 24.7448 14.9575 25.0972 14.9575 25.532C14.9575 25.9668 15.31 26.3192 15.7448 26.3192Z" stroke={props.color ? getColor(props.color) : getColor('black')} strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
            <path d="M0.787231 9.78723H3.93618L6.04598 20.3283C6.11797 20.6908 6.31514 21.0164 6.60299 21.2481C6.89083 21.4798 7.251 21.6029 7.62046 21.5958H15.2724C15.6419 21.6029 16.002 21.4798 16.2899 21.2481C16.5777 21.0164 16.7749 20.6908 16.8469 20.3283L18.1065 13.7234H4.72342" stroke={props.color ? getColor(props.color) : getColor('black')} strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
        </g>
        <circle cx="18" cy="6" r="6" fill={props.color ? getColor(props.color) : getColor('primary-200')}/>
        <text x="15" y="10" fill={props.color ? getColor(props.color) : getColor('black')} style={{fontSize: "8pt"}}>{props.qtd}</text>
        <defs>
            <clipPath id="clip0_155_2">
                <rect width="18.8937" height="18.8937" fill={props.color ? getColor(props.color) : getColor('black')} transform="translate(0 9)"/>
            </clipPath>
        </defs>
    </svg>

);

export const BagIcon = (props) => (
    <svg width="16" height="18" viewBox="0 0 16 18" fill="none" xmlns="http://www.w3.org/2000/svg">
        <path d="M8 0.666667C8.88405 0.666667 9.7319 1.01786 10.357 1.64298C10.9821 2.2681 11.3333 3.11594 11.3333 4H13.0292C13.461 3.99994 13.876 4.16749 14.1867 4.46734C14.4974 4.7672 14.6797 5.17595 14.695 5.6075L15.0517 15.6075C15.0596 15.8312 15.0224 16.0541 14.9423 16.2631C14.8623 16.4721 14.7409 16.6628 14.5855 16.8238C14.4301 16.9849 14.2439 17.113 14.0379 17.2006C13.832 17.2881 13.6105 17.3332 13.3867 17.3333H2.61333C2.38953 17.3332 2.16805 17.2881 1.96208 17.2006C1.75611 17.113 1.56987 16.9849 1.41449 16.8238C1.2591 16.6628 1.13775 16.4721 1.05766 16.2631C0.977569 16.0541 0.940389 15.8312 0.948333 15.6075L1.305 5.6075C1.32033 5.17595 1.50256 4.7672 1.81329 4.46734C2.12403 4.16749 2.53901 3.99994 2.97083 4H4.66667C4.66667 3.11594 5.01786 2.2681 5.64298 1.64298C6.2681 1.01786 7.11594 0.666667 8 0.666667ZM4.66667 5.66667H2.97083L2.61333 15.6667H13.3867L13.0292 5.66667H11.3333V6.5C11.3331 6.7124 11.2518 6.91669 11.106 7.07114C10.9602 7.22559 10.7609 7.31853 10.5488 7.33098C10.3368 7.34342 10.128 7.27444 9.96514 7.13811C9.80226 7.00179 9.69759 6.80841 9.6725 6.5975L9.66667 6.5V5.66667H6.33333V6.5C6.3331 6.7124 6.25177 6.91669 6.10596 7.07114C5.96015 7.22559 5.76087 7.31853 5.54884 7.33098C5.3368 7.34342 5.12802 7.27444 4.96514 7.13811C4.80226 7.00179 4.69759 6.80841 4.6725 6.5975L4.66667 6.5V5.66667ZM8 2.33333C7.57952 2.3332 7.17453 2.492 6.86621 2.77791C6.55789 3.06382 6.36904 3.4557 6.3375 3.875L6.33333 4H9.66667C9.66667 3.55797 9.49107 3.13405 9.17851 2.82149C8.86595 2.50893 8.44203 2.33333 8 2.33333Z" fill={props.color ? getColor(props.color) : getColor('black')}/>
    </svg>
);

export const HeartIcon = (props) => (
    <svg width="19" height="19" viewBox="0 0 19 19" fill="none" xmlns="http://www.w3.org/2000/svg" {...props}>
        <g clipPath="url(#clip0_17_119)">
            <path d="M15.7984 3.62918C15.4112 3.22691 14.9515 2.90779 14.4455 2.69007C13.9395 2.47235 13.3972 2.36029 12.8495 2.36029C12.3018 2.36029 11.7595 2.47235 11.2535 2.69007C10.7475 2.90779 10.2878 3.22691 9.90056 3.62918L9.097 4.46365L8.29343 3.62918C7.51132 2.81699 6.45056 2.36071 5.3445 2.36071C4.23843 2.36071 3.17767 2.81699 2.39556 3.62918C1.61345 4.44137 1.17407 5.54293 1.17407 6.69154C1.17407 7.84014 1.61345 8.9417 2.39556 9.75389L3.19913 10.5884L9.097 16.7131L14.9949 10.5884L15.7984 9.75389C16.1858 9.3518 16.4931 8.8744 16.7028 8.34895C16.9124 7.8235 17.0203 7.26031 17.0203 6.69154C17.0203 6.12277 16.9124 5.55957 16.7028 5.03412C16.4931 4.50867 16.1858 4.03127 15.7984 3.62918Z" stroke={props.color ? getColor(props.color) : getColor('black')} strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
        </g>
        <defs>
            <clipPath id="clip0_17_119">
                <rect width="18.1939" height="18.8937" fill={props.color ? getColor(props.color) : getColor('black')}/>
            </clipPath>
        </defs>
    </svg>
);

export const UserIcon = (props) => (
    <svg width="19" height="19" viewBox="0 0 19 19" fill="none" xmlns="http://www.w3.org/2000/svg" {...props}>
        <path d="M15.8324 16.532V14.9575C15.8324 14.1224 15.5006 13.3214 14.9101 12.7309C14.3195 12.1404 13.5186 11.8086 12.6834 11.8086H6.38552C5.55037 11.8086 4.74942 12.1404 4.15888 12.7309C3.56834 13.3214 3.23657 14.1224 3.23657 14.9575V16.532" stroke={props.color ? getColor(props.color) : getColor('black')} strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
        <path d="M9.53445 8.6596C11.2736 8.6596 12.6834 7.24976 12.6834 5.51065C12.6834 3.77153 11.2736 2.36169 9.53445 2.36169C7.79533 2.36169 6.3855 3.77153 6.3855 5.51065C6.3855 7.24976 7.79533 8.6596 9.53445 8.6596Z" stroke={props.color ? getColor(props.color) : getColor('black')} strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
    </svg>
);

export const SearchIcon = (props) => (
    <svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg" {...props}>
        <path d="M7.04628 12.3014C9.67497 12.3014 11.8059 10.0583 11.8059 7.29123C11.8059 4.52419 9.67497 2.28107 7.04628 2.28107C4.41759 2.28107 2.28662 4.52419 2.28662 7.29123C2.28662 10.0583 4.41759 12.3014 7.04628 12.3014Z" stroke={props.color ? getColor(props.color) : getColor('black')} strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
        <path d="M12.9959 13.554L10.4078 10.8297" stroke={props.color ? getColor(props.color) : getColor('black')} strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
    </svg>
);

export const CloseIcon = (props) => (
    <svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
        <path fillRule="evenodd" clipRule="evenodd" d="M5.28003 4.22003C5.13786 4.08755 4.94981 4.01543 4.75551 4.01885C4.56121 4.02228 4.37582 4.10099 4.23841 4.23841C4.101 4.37582 4.02228 4.56121 4.01886 4.75551C4.01543 4.94981 4.08755 5.13785 4.22003 5.28003L6.94003 8.00003L4.22003 10.72C4.14634 10.7887 4.08724 10.8715 4.04625 10.9635C4.00526 11.0555 3.98322 11.1548 3.98144 11.2555C3.97966 11.3562 3.99819 11.4562 4.03591 11.5496C4.07363 11.643 4.12977 11.7278 4.20099 11.7991C4.27221 11.8703 4.35705 11.9264 4.45043 11.9642C4.54382 12.0019 4.64385 12.0204 4.74455 12.0186C4.84526 12.0168 4.94457 11.9948 5.03657 11.9538C5.12857 11.9128 5.21137 11.8537 5.28003 11.78L8.00003 9.06003L10.72 11.78C10.7887 11.8537 10.8715 11.9128 10.9635 11.9538C11.0555 11.9948 11.1548 12.0168 11.2555 12.0186C11.3562 12.0204 11.4562 12.0019 11.5496 11.9642C11.643 11.9264 11.7279 11.8703 11.7991 11.7991C11.8703 11.7278 11.9264 11.643 11.9642 11.5496C12.0019 11.4562 12.0204 11.3562 12.0186 11.2555C12.0168 11.1548 11.9948 11.0555 11.9538 10.9635C11.9128 10.8715 11.8537 10.7887 11.78 10.72L9.06003 8.00003L11.78 5.28003C11.9125 5.13785 11.9846 4.94981 11.9812 4.75551C11.9778 4.56121 11.8991 4.37582 11.7617 4.23841C11.6242 4.10099 11.4389 4.02228 11.2446 4.01885C11.0503 4.01543 10.8622 4.08755 10.72 4.22003L8.00003 6.94003L5.28003 4.22003Z" fill={props.color ? getColor(props.color) : getColor('black')}/>
    </svg>
);

export const TruckIcon = (props) => (
    <svg width="75" height="75" viewBox="0 0 75 75" fill="none" xmlns="http://www.w3.org/2000/svg">
        <path d="M49 9.375H4.125C3.57272 9.375 3.125 9.82272 3.125 10.375V49C3.125 49.5523 3.57272 50 4.125 50H49C49.5523 50 50 49.5523 50 49V10.375C50 9.82272 49.5523 9.375 49 9.375Z" stroke={ props.color ? getColor(props.color) : getColor('black') } strokeWidth="4" strokeLinecap="round" strokeLinejoin="round"/>
        <path d="M50 26C50 25.4477 50.4477 25 51 25H62.0858C62.351 25 62.6054 25.1054 62.7929 25.2929L71.5821 34.0821C71.7696 34.2696 71.875 34.524 71.875 34.7892V49C71.875 49.5523 71.4273 50 70.875 50H51C50.4477 50 50 49.5523 50 49V26Z" stroke={ props.color ? getColor(props.color) : getColor('black') } strokeWidth="4" strokeLinecap="round" strokeLinejoin="round"/>
        <path d="M17.1875 65.625C21.5022 65.625 25 62.1272 25 57.8125C25 53.4978 21.5022 50 17.1875 50C12.8728 50 9.375 53.4978 9.375 57.8125C9.375 62.1272 12.8728 65.625 17.1875 65.625Z" stroke={ props.color ? getColor(props.color) : getColor('black') } strokeWidth="4" strokeLinecap="round" strokeLinejoin="round"/>
        <path d="M57.8125 65.625C62.1272 65.625 65.625 62.1272 65.625 57.8125C65.625 53.4978 62.1272 50 57.8125 50C53.4978 50 50 53.4978 50 57.8125C50 62.1272 53.4978 65.625 57.8125 65.625Z" stroke={ props.color ? getColor(props.color) : getColor('black') } strokeWidth="4" strokeLinecap="round" strokeLinejoin="round"/>
    </svg>
);

export const SimpleCreditCardIcon = (props) => (
    <svg width="79" height="77" viewBox="0 0 79 77" fill="none" xmlns="http://www.w3.org/2000/svg">
        <path d="M69.125 13.1667H9.87496C6.23908 13.1667 3.29163 16.1141 3.29163 19.75V59.25C3.29163 62.8859 6.23908 65.8334 9.87496 65.8334H69.125C72.7608 65.8334 75.7083 62.8859 75.7083 59.25V19.75C75.7083 16.1141 72.7608 13.1667 69.125 13.1667Z" stroke={ props.color ? getColor(props.color) : getColor('black') } strokeWidth="4" strokeLinecap="round" strokeLinejoin="round"/>
        <path d="M3.29163 32.9167H75.7083" stroke={ props.color ? getColor(props.color) : getColor('black') } strokeWidth="4" strokeLinecap="round" strokeLinejoin="round"/>
    </svg>
);

export const StarIcon = (props) => {
    //If props.full is true, so full start is returned, otherwise if props.full is false stroke star is returned
    return props.full ? (
        <svg width="14" height="13" viewBox="0 0 14 13" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M7.25439 1.29272L9.06543 4.69646L13.1153 5.24562L10.1849 7.89358L10.8765 11.6344L7.25439 9.86731L3.63232 11.6344L4.32391 7.89358L1.39343 5.24562L5.44335 4.69646L7.25439 1.29272Z" fill={ props.color ? getColor(props.color) : getColor('primary-100') } stroke={ props.color ? getColor(props.color) : getColor('primary-100') } strokeLinecap="round" strokeLinejoin="round"/>
        </svg>
    ) : (
        <svg width="14" height="13" viewBox="0 0 14 13" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M7.25439 1.29272L9.06543 4.69646L13.1153 5.24562L10.1849 7.89358L10.8765 11.6344L7.25439 9.86731L3.63232 11.6344L4.32391 7.89358L1.39343 5.24562L5.44335 4.69646L7.25439 1.29272Z" stroke={ props.color ? getColor(props.color) : getColor('primary-100') } strokeLinecap="round" strokeLinejoin="round"/>
        </svg>
    );
}

export const GoogleIcon = (props) => (
    <svg
        width="40"
        height="40"
        viewBox="0 0 40 40"
        fill="none"
        xmlns="http://www.w3.org/2000/svg"
    >
        <g clipPath="url(#clip0_168_23)">
            <path
                d="M39.6099 20.4607C39.6099 19.1011 39.4997 17.7342 39.2645 16.3967H20.3999V24.0984H31.2028C30.7545 26.5823 29.3141 28.7796 27.205 30.1759V35.1731H33.65C37.4347 31.6898 39.6099 26.5455 39.6099 20.4607Z"
                fill="#4285F4"
            />
            <path
                d="M20.4001 40.0014C25.7942 40.0014 30.3431 38.2303 33.6575 35.1732L27.2125 30.176C25.4194 31.3959 23.1045 32.0867 20.4074 32.0867C15.1897 32.0867 10.7657 28.5665 9.17833 23.8339H2.52759V28.9854C5.92278 35.7391 12.8381 40.0014 20.4001 40.0014V40.0014Z"
                fill="#34A853"
            />
            <path
                d="M9.1708 23.8338C8.33303 21.3498 8.33303 18.6602 9.1708 16.1762V11.0247H2.5274C-0.309265 16.676 -0.309265 23.334 2.5274 28.9853L9.1708 23.8338V23.8338Z"
                fill="#FBBC04"
            />
            <path
                d="M20.4001 7.9161C23.2515 7.87201 26.0073 8.94494 28.0723 10.9144L33.7824 5.20436C30.1668 1.80917 25.3679 -0.0574433 20.4001 0.00134778C12.8381 0.00134778 5.92277 4.2637 2.52759 11.0247L9.17098 16.1763C10.751 11.4362 15.1824 7.9161 20.4001 7.9161V7.9161Z"
                fill="#EA4335"
            />
        </g>
        <defs>
            <clipPath id="clip0_168_23">
                <rect width="40" height="40" fill="white" />
            </clipPath>
        </defs>
    </svg>
);
export const FacebookIcon = (props) => (
    <svg
        width="41"
        height="40"
        viewBox="0 0 41 40"
        fill="none"
        xmlns="http://www.w3.org/2000/svg"
    >
        <g clipPath="url(#clip0_168_28)">
            <path
                d="M40.7547 20C40.7547 8.9543 31.6315 0 20.3774 0C9.12325 0 0 8.9543 0 20C0 29.9824 7.45167 38.2566 17.1934 39.757V25.7813H12.0195V20H17.1934V15.5938C17.1934 10.5813 20.2357 7.8125 24.8902 7.8125C27.119 7.8125 29.4517 8.20313 29.4517 8.20313V13.125H26.8822C24.3509 13.125 23.5613 14.6668 23.5613 16.25V20H29.2129L28.3094 25.7813H23.5613V39.757C33.3031 38.2566 40.7547 29.9824 40.7547 20Z"
                fill="#1877F2"
            />
            <path
                d="M28.3095 25.7812L29.2129 20H23.5614V16.25C23.5614 14.6684 24.351 13.125 26.8823 13.125H29.4517V8.20312C29.4517 8.20312 27.1199 7.8125 24.8903 7.8125C20.2357 7.8125 17.1935 10.5813 17.1935 15.5938V20H12.0195V25.7812H17.1935V39.757C19.3033 40.081 21.4516 40.081 23.5614 39.757V25.7812H28.3095Z"
                fill="white"
            />
        </g>
        <defs>
            <clipPath id="clip0_168_28">
                <rect width="40.7547" height="40" fill="white" />
            </clipPath>
        </defs>
    </svg>
);

export const CreditCardIcon = (props) => (
    <svg
        width={ props.width ? props.width : '36' }
        height={ props.height ? props.height : '32' }
        viewBox="0 0 36 32"
        fill="none"
        xmlns="http://www.w3.org/2000/svg"
    >
        <path
            d="M21.1622 1.82322C21.7646 1.47904 22.3669 1.15398 22.5007 1.09661C22.6346 1.04881 23.0361 1.00101 23.409 1.00101C23.9253 0.991447 24.193 1.04881 24.5563 1.2209C24.8144 1.34519 25.1682 1.59377 25.3307 1.76586C25.5028 1.94751 26.3919 3.40073 27.3289 5.00692C28.2562 6.61311 29.3175 8.42007 29.6712 9.02239C30.025 9.62471 30.589 10.5903 31.5451 12.2252L32.4438 12.273C33.1226 12.3113 33.4572 12.3877 33.7536 12.5407C33.9831 12.6554 34.3177 12.9136 34.4993 13.1143C34.6906 13.3056 34.9296 13.6975 35.0252 13.9652C35.2068 14.4528 35.2164 14.7683 35.2164 21.6424C35.2164 28.507 35.2068 28.832 35.0347 29.3101C34.9296 29.5873 34.681 29.9889 34.4802 30.1992C34.2794 30.4096 33.9448 30.6677 33.7345 30.7729C33.3628 30.9635 33.1146 30.9641 21.3695 30.9925L21.2579 30.9928C10.005 31.0119 9.13496 31.0023 8.73342 30.8493C8.4944 30.7633 8.1311 30.5338 7.93032 30.3522C7.71999 30.161 7.45229 29.7977 7.33756 29.53C7.12723 29.0902 7.10811 28.9181 7.10811 26.0403L6.78304 25.4954C6.60139 25.1894 6.07556 24.3003 5.61665 23.5068C5.15774 22.7228 4.64146 21.8337 4.47893 21.5468C4.3164 21.26 3.49418 19.8642 2.66241 18.4396C1.62986 16.6709 1.12315 15.7053 1.05622 15.3802C0.979736 15.036 0.979736 14.7588 1.06578 14.3764C1.12315 14.0895 1.29524 13.6689 1.43865 13.449C1.59162 13.2291 1.87844 12.9231 2.08877 12.7702C2.2991 12.6172 3.74276 11.7759 5.29158 10.8963C6.84041 10.0167 8.38923 9.12756 8.73342 8.92678C9.0776 8.72601 10.3205 8.01852 11.506 7.34928C12.6915 6.67047 13.8962 5.9821 14.183 5.81001C14.4698 5.64748 15.6744 4.95912 16.86 4.28031C18.0455 3.61106 19.2501 2.9227 19.5369 2.76017C19.8237 2.58809 20.5598 2.16746 21.1621 1.82328L21.1622 1.82322Z"
            stroke={ props.color ? getColor(props.color) : getColor('black') }
            strokeWidth={ props.strokeWidth ? props.strokeWidth : '0.4' }
        />
        <path
            d="M2.2616 13.6211C2.37632 13.5063 2.88304 13.1622 3.38019 12.8753M2.2616 13.6211C2.14687 13.7454 1.98434 14.0131 1.90785 14.2043C1.82181 14.405 1.75488 14.6823 1.75488 14.8257C1.75488 14.9787 1.80269 15.2464 1.86961 15.428L3.38019 12.8753M2.2616 13.6211L2.40302 13.7625C2.40385 13.7617 2.40473 13.7608 2.40565 13.7599M2.2616 13.6211L2.40856 13.7567C2.40759 13.7578 2.40662 13.7588 2.40565 13.7599M3.38019 12.8753C3.71338 12.6767 4.13245 12.4351 4.47625 12.2369M3.38019 12.8753L4.47625 12.2369M2.40565 13.7599C2.44975 13.7172 2.58653 13.6145 2.78888 13.4788C2.98851 13.345 3.23567 13.1896 3.48014 13.0486L3.48015 13.0486L3.48261 13.0471C3.81475 12.8491 4.23074 12.6093 4.57384 12.4115C4.74363 12.3137 4.89557 12.2261 5.01067 12.1589L4.9099 11.9862M2.40565 13.7599C2.31041 13.8647 2.16213 14.1071 2.09355 14.2785L2.09174 14.2831L2.09168 14.283C2.01192 14.4692 1.95488 14.7187 1.95488 14.8257C1.95488 14.9529 1.99773 15.1972 2.05728 15.3589L2.06054 15.3677L2.06033 15.3678C2.0684 15.3934 2.10916 15.4822 2.19021 15.6395C2.26731 15.7892 2.37271 15.9855 2.49894 16.2147C2.75127 16.673 3.08497 17.2593 3.43792 17.8603C3.79177 18.4628 4.18623 19.137 4.53639 19.7357C4.59637 19.8383 4.65504 19.9386 4.71199 20.036C4.98758 20.5073 5.22269 20.9093 5.36917 21.1587C5.72227 21.76 6.24786 22.6582 6.52624 23.1477M4.9099 11.9862L5.01067 12.1589C5.27374 12.0055 5.98125 11.6045 6.7461 11.171C6.97791 11.0396 7.21498 10.9052 7.44655 10.7739L7.557 10.7112L7.55998 10.7095C8.53027 10.1591 9.67387 9.51032 10.1267 9.24231C10.5932 8.9662 13.6027 7.24649 16.8161 5.41981C18.4222 4.50682 19.9016 3.66796 20.9925 3.0514C21.538 2.74311 21.9862 2.49048 22.3046 2.31198C22.4638 2.2227 22.5903 2.15211 22.6801 2.10242C22.725 2.07755 22.7604 2.05812 22.786 2.04428C22.8017 2.03579 22.8117 2.0305 22.8173 2.02753C22.8516 2.01731 22.9333 2.00171 23.0528 1.98856C23.1766 1.97493 23.3222 1.96586 23.4575 1.96586V1.96592L23.4627 1.96579C23.8023 1.95709 24.0238 2.01655 24.257 2.14984L24.257 2.14987L24.2605 2.15177C24.439 2.24915 24.7031 2.49305 24.8429 2.68422C24.912 2.7857 24.9751 2.88508 25.0202 2.9643C25.029 2.97977 25.0369 2.99403 25.0438 3.007C25.0333 3.01552 25.0216 3.02479 25.0084 3.03475C24.9275 3.09624 24.8116 3.1723 24.6803 3.24474C24.4013 3.39865 23.1756 4.0977 21.972 4.78546L21.971 4.78606C21.3692 5.13475 20.7816 5.47154 20.3216 5.73436C20.1156 5.85207 19.9349 5.95514 19.79 6.0378C19.6119 6.13934 19.4879 6.21006 19.4375 6.23925L19.4374 6.23912L19.4309 6.24324C19.3141 6.31698 18.5878 6.72904 17.6069 7.2856C17.1051 7.57028 16.5367 7.89277 15.9491 8.22712C15.0831 8.71993 14.2742 9.18899 13.6695 9.54703C13.3673 9.72598 13.1153 9.87762 12.9325 9.99081C12.8412 10.0473 12.7661 10.0949 12.7101 10.1319C12.6823 10.1503 12.6579 10.1669 12.6382 10.1811C12.6218 10.1929 12.5982 10.2103 12.5795 10.229L12.5794 10.2289L12.5744 10.2344C12.5028 10.3115 12.4365 10.403 12.4155 10.5172C12.3935 10.637 12.4278 10.7441 12.4775 10.8374L12.4775 10.8374L12.4784 10.8391C12.5262 10.9266 12.6002 10.998 12.6788 11.0475C12.7568 11.0967 12.8555 11.1345 12.96 11.1345C13.0054 11.1345 13.051 11.123 13.0835 11.1136C13.1206 11.1028 13.1624 11.0879 13.2067 11.0706C13.2956 11.0358 13.4051 10.9869 13.5269 10.9284C13.7711 10.8112 14.0741 10.6511 14.3786 10.4772L14.3786 10.4772L14.3806 10.476C14.665 10.309 14.9823 10.1253 15.2676 9.96006C15.5803 9.77906 15.8546 9.62023 16.0054 9.5298C16.161 9.4416 16.5851 9.19881 17.1296 8.88711C17.6039 8.61558 18.1696 8.29175 18.7286 7.97228C19.3146 7.63744 20.1111 7.18487 20.929 6.72015L20.9965 6.68183C21.8377 6.20387 22.6959 5.71619 23.3654 5.33363L4.9099 11.9862ZM4.9099 11.9862L6.83868 23.9773C6.84202 23.954 6.8456 23.9236 6.8492 23.8849C6.85447 23.8283 6.85937 23.7584 6.86392 23.6737M4.9099 11.9862C4.79683 12.0521 4.64663 12.1387 4.47826 12.2358M4.9099 11.9862L4.47826 12.2358M6.52624 23.1477C6.52584 23.1471 6.52545 23.1464 6.52505 23.1457L6.35355 23.2486L6.52741 23.1498C6.52702 23.1491 6.52663 23.1484 6.52624 23.1477ZM6.52624 23.1477C6.64512 23.3458 6.76311 23.529 6.86392 23.6737M6.86392 23.6737C6.88268 23.7007 6.90084 23.7263 6.9183 23.7504C6.97059 23.8226 7.01421 23.8783 7.04717 23.9157C7.09243 23.449 7.10884 22.1338 7.10884 19.2045C7.10884 14.6536 7.1184 14.2521 7.28094 13.8696C7.37654 13.6497 7.606 13.296 7.78765 13.0952M6.86392 23.6737C6.87156 23.5315 6.87819 23.3474 6.8838 23.1136C6.90167 22.3694 6.90884 21.1408 6.90884 19.2045C6.90884 16.9308 6.91121 15.6886 6.93404 14.9676C6.9568 14.2489 6.99978 14.0199 7.09687 13.7914L7.09752 13.7899C7.20209 13.5494 7.44285 13.1788 7.63783 12.9627M7.63783 12.9627C7.63731 12.9633 7.6368 12.9639 7.63629 12.9645L7.78765 13.0952M7.63783 12.9627C7.63833 12.9622 7.63884 12.9616 7.63934 12.961L7.78765 13.0952M7.63783 12.9627C7.84001 12.7294 8.22507 12.447 8.50398 12.3127L8.50715 12.3112L8.50716 12.3112L8.9852 12.0913L9.02498 12.073H9.06878C17.3722 12.073 22.7379 12.0682 26.0312 12.0599C27.678 12.0557 28.8063 12.0506 29.5245 12.0448C29.8651 12.042 30.1129 12.0391 30.2798 12.036M7.78765 13.0952C7.9693 12.8849 8.33261 12.6172 8.59074 12.4929L9.06878 12.273C23.8415 12.273 29.3163 12.2579 30.3656 12.2343C30.3634 12.2269 30.3583 12.2122 30.3487 12.1884C30.333 12.1497 30.3099 12.0985 30.2798 12.036M30.2798 12.036C30.289 12.0359 30.2979 12.0357 30.3066 12.0355C30.3903 12.0339 30.4502 12.0323 30.4891 12.0306C30.4923 12.0305 30.4953 12.0304 30.4981 12.0303C30.398 11.8105 30.1943 11.4287 29.9492 11.0014M30.2798 12.036C30.2651 12.0054 30.2487 11.9721 30.2306 11.9362C30.1219 11.7198 29.9616 11.4251 29.7766 11.1024M29.7766 11.1024C29.7769 11.1029 29.7772 11.1034 29.7775 11.104L29.9492 11.0014M29.7766 11.1024C29.7763 11.1019 29.776 11.1014 29.7757 11.1009L29.9492 11.0014M29.7766 11.1024C29.5851 10.7816 29.3794 10.4301 29.2005 10.1235C29.1734 10.0772 29.147 10.0319 29.1214 9.98799C28.9765 9.73957 28.8558 9.5328 28.7834 9.41211L28.7809 9.40785L28.7809 9.40781C28.6193 9.12262 27.8653 7.83417 27.1094 6.54245L27.1097 6.54284L27.1098 6.54305L27.2819 6.44122C28.0372 7.73184 28.7924 9.02241 28.9549 9.30921C29.028 9.43108 29.1495 9.63925 29.2943 9.88752L29.2944 9.88758C29.4904 10.2236 29.7293 10.6331 29.9492 11.0014M4.47625 12.2369L4.47643 12.2368M4.47625 12.2369L4.47643 12.2368M4.47643 12.2368L4.47661 12.2367M4.47643 12.2368L4.47661 12.2367M4.47661 12.2367L4.47826 12.2358M4.47661 12.2367L4.47826 12.2358M25.0777 3.07881C25.0782 3.0804 25.0781 3.08016 25.0776 3.07834L25.0777 3.07881ZM30.3661 12.2343C30.3654 12.23 30.3647 12.2232 30.3646 12.2146L30.3646 12.2144C30.3645 12.2097 30.3627 12.1386 30.4221 12.0813L30.4197 12.0838C30.4269 12.0766 30.4342 12.0704 30.4411 12.0652C30.4598 12.0513 30.4759 12.0442 30.4815 12.0418C30.4888 12.0387 30.4953 12.0364 30.5002 12.0349C30.5509 12.1468 30.574 12.2155 30.5611 12.2252C30.5579 12.2284 30.496 12.2314 30.3661 12.2343ZM27.1086 6.54108L27.1093 6.54223L23.3654 5.33362C24.4584 4.71044 25.0629 4.37062 25.4065 4.20466C25.5423 4.13904 25.6242 4.10742 25.6722 4.0938C25.8174 4.33135 26.4288 5.36436 27.1086 6.54108ZM8.6252 13.5963L8.62521 13.5963L8.62756 13.5947C8.7649 13.5002 8.95947 13.3899 9.08077 13.3352C9.08882 13.3343 9.10018 13.3332 9.11554 13.332C9.15533 13.329 9.21417 13.3259 9.29623 13.3228C9.45991 13.3167 9.70873 13.311 10.0672 13.3058C10.7836 13.2955 11.9329 13.2875 13.7039 13.2821C17.2374 13.2714 23.2429 13.2713 33.216 13.2856L33.5343 13.5386L33.5343 13.5386L33.5375 13.5411C33.6977 13.6631 33.9322 13.9447 34.2523 14.5678V21.5468C34.2523 23.7214 34.2427 25.5107 34.226 26.7835C34.2177 27.42 34.2075 27.9264 34.1959 28.287C34.1901 28.4674 34.184 28.61 34.1776 28.7135C34.1744 28.7654 34.1713 28.8061 34.1682 28.8361C34.1657 28.8608 34.1638 28.8728 34.1632 28.8764C34.1632 28.8767 34.1631 28.877 34.1631 28.8772C34.1142 29.0432 33.9528 29.3285 33.803 29.5148C33.6496 29.6838 33.394 29.8707 33.2567 29.9379C33.2527 29.939 33.2431 29.9415 33.2254 29.9446C33.1994 29.9493 33.1631 29.9543 33.1136 29.9593C33.0148 29.9693 32.8731 29.9785 32.676 29.9867C32.2822 30.0031 31.6781 30.0154 30.7754 30.0243C28.9709 30.0423 25.9818 30.047 21.1152 30.047C15.7224 30.047 12.741 30.0423 11.0719 30.0208C10.2366 30.01 9.73393 29.9951 9.42327 29.9749C9.11459 29.9547 9.02081 29.93 8.98497 29.9145C8.83418 29.8341 8.63331 29.7026 8.53976 29.627C8.50883 29.5982 8.45631 29.5358 8.39666 29.4496C8.33687 29.3633 8.27817 29.265 8.23592 29.1763L8.236 29.1763L8.23321 29.1708C8.17183 29.0515 8.12407 28.9302 8.09993 27.925C8.0761 26.9325 8.0737 25.1144 8.0737 21.6425C8.0737 18.1034 8.0761 16.2879 8.10112 15.31C8.12623 14.3281 8.17506 14.2245 8.24425 14.0825C8.28967 13.9918 8.35803 13.8866 8.43213 13.7929C8.50882 13.6959 8.57947 13.6267 8.6252 13.5963Z"
            stroke={ props.color ? getColor(props.color) : getColor('black') }
            strokeWidth={ props.strokeWidth ? props.strokeWidth : '0.4' }
        />
        <path
            d="M10.4448 16.0112C10.4448 14.9787 10.4639 14.7492 10.5978 14.6249C10.7412 14.4911 11.8311 14.472 21.1432 14.472C29.4036 14.472 31.5643 14.4911 31.6599 14.5867C31.746 14.6727 31.7746 15.0838 31.7746 16.0017C31.7746 16.8908 31.746 17.3306 31.6599 17.4071C31.5739 17.5027 29.3367 17.5314 21.1432 17.5314C12.0223 17.5314 10.7221 17.5122 10.5978 17.388C10.4831 17.2732 10.4544 16.9769 10.4448 16.0112Z"
            stroke={ props.color ? getColor(props.color) : getColor('black') }
            strokeWidth={ props.strokeWidth ? props.strokeWidth : '0.4' }
        />
        <path
            d="M11.5634 20.1892C11.4296 20.0936 11.4009 19.998 11.4487 19.7972L11.5061 19.5391H19.776C27.568 19.5391 28.046 19.5487 28.0938 19.7016C28.1225 19.7972 28.1225 19.9407 28.1033 20.0171C28.0747 20.0936 27.9599 20.1892 27.8357 20.2275C27.7114 20.2657 24.0401 20.304 19.6804 20.304C13.4277 20.304 11.7068 20.2848 11.5634 20.1892Z"
            stroke={ props.color ? getColor(props.color) : getColor('black') }
            strokeWidth={ props.strokeWidth ? props.strokeWidth : '0.4' }
        />
        <path
            d="M11.3913 21.9197C11.3818 21.8337 11.4391 21.7189 11.5061 21.652C11.6112 21.566 13.5903 21.5373 27.9504 21.5373L28.0747 21.7763C28.1703 21.9675 28.1703 22.0344 28.046 22.1587C27.9217 22.3021 27.0995 22.3117 19.776 22.3117C13.3513 22.3117 11.6303 22.283 11.5347 22.1874C11.4678 22.1205 11.4009 22.0058 11.3913 21.9197Z"
            stroke={ props.color ? getColor(props.color) : getColor('black') }
            strokeWidth={ props.strokeWidth ? props.strokeWidth : '0.4' }
        />
        <path
            d="M25.3308 25.352C25.522 25.0779 25.7929 24.8516 26.1434 24.6732C26.4685 24.5011 26.8127 24.4055 27.0708 24.4055C27.2907 24.4055 27.6349 24.482 27.8357 24.568C28.1607 24.7019 28.2276 24.7019 28.6005 24.568C28.8204 24.482 29.1741 24.4055 29.3845 24.4055C29.5948 24.4055 29.9294 24.482 30.1302 24.5584C30.331 24.6445 30.6178 24.807 30.7708 24.9218C30.9333 25.046 31.1628 25.3424 31.2775 25.591C31.4018 25.8491 31.4878 26.2124 31.4878 26.461C31.4878 26.7 31.4209 27.0538 31.3444 27.2545C31.2584 27.4553 31.0385 27.7804 30.8377 27.9716C30.5987 28.2297 30.331 28.3827 29.9581 28.4879C29.5374 28.6026 29.3462 28.6122 28.9542 28.5261C28.6961 28.4592 28.4284 28.3731 28.3615 28.3253C28.285 28.268 28.1894 28.268 28.1225 28.3253C28.0555 28.3636 27.807 28.4592 27.568 28.5166C27.3385 28.5835 26.9656 28.6026 26.7553 28.5739C26.545 28.5452 26.1721 28.3827 25.914 28.2106C25.5698 27.9812 25.3881 27.7708 25.2065 27.3693C25.0057 26.9486 24.9675 26.7383 24.9961 26.308C25.0248 25.9065 25.1109 25.6579 25.3308 25.352Z"
            stroke={ props.color ? getColor(props.color) : getColor('black') }
            strokeWidth={ props.strokeWidth ? props.strokeWidth : '0.4' }
        />
        <path
            d="M11.3913 27.2737C11.3818 27.1876 11.4391 27.0729 11.5156 27.006C11.6112 26.9199 12.3474 26.9008 14.4125 26.9199C16.9269 26.939 17.1851 26.9582 17.2807 27.1111C17.3572 27.2354 17.3572 27.3215 17.2807 27.4458C17.1851 27.5987 16.9269 27.6179 14.4125 27.637C12.3378 27.6465 11.6208 27.6274 11.5347 27.5414C11.4583 27.4744 11.4009 27.3597 11.3913 27.2737Z"
            stroke={ props.color ? getColor(props.color) : getColor('black') }
            strokeWidth={ props.strokeWidth ? props.strokeWidth : '0.4' }
        />
    </svg>
);
